{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "type": "object",
      "required": ["andr_query"],
      "properties": {
        "andr_query": {
          "$ref": "#/definitions/AndromedaQuery"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "The current config of the Splitter contract",
      "type": "object",
      "required": ["get_splitter_config"],
      "properties": {
        "get_splitter_config": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AndromedaQuery": {
      "oneOf": [
        {
          "type": "object",
          "required": ["get"],
          "properties": {
            "get": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["owner"],
          "properties": {
            "owner": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["operators"],
          "properties": {
            "operators": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["is_operator"],
          "properties": {
            "is_operator": {
              "type": "object",
              "required": ["address"],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["module"],
          "properties": {
            "module": {
              "type": "object",
              "required": ["id"],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Uint64"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": ["module_ids"],
          "properties": {
            "module_ids": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
